This webapp is an interpreter for a language called ><>. I wrote it
because I think that ><> has a really cool concept-- a 2d codebox with
an instruction pointer. Additionally, with this webapp, you don't need
Python installed to run it and neither do you need to compile it (the
two interpreters I know of are written in Python and Go); you can just
submit it on the webapp and it will run it. Of course, some management
features are also provided-- for example, persistent file storage, file
deletion and editing. I learnt quite a bit about Javascript during the
proccess, and I also learnt how to hack things together in Jinja (it
/is/ Turing-complete, after all). Also quite a bit about server-side
proccessing, and about GET and POST requests.

The hardest bit was probably the implementation of the interpreter (in
Javascript, by the way)-- I tried writing in a more functional style
at first, but soon realised that Javascript was so designed for mutable
objects it would be quite impossible without a lot of wasteful copying
which the JS interpreter is not optimised for (unlike Haskell's (see
https://wiki.haskell.org/GHC/Memory_Management)). So I had to throw most
of it out and start over. I used TypeScript because typed Javascript,
even if the type system is subpar (again compared to Haskell's (see
https://tinyurl.com/bckp2cbb)). I could've used PureScript in hindsight,
but by the time I found out about that it was already too late.

For the server code, I made extensive use of redirects (for example,
see the routes /postsubmit and /postedit) to do server proccessing. This
may or may not be a common practice, I'm not really quite sure. Those
pages will do proccessing (for example, dumping JSON or writing files)
and then immediately redirect you back to /. Password protection was
a planned feature, but I got a bit stuck with all the data redirection
and eventually gave up (for now ;)) as I knew it probably wouldn't make
it in time.

Also, take a crack at "solving" the "let o=(o...' code before reading
spoiler.txt-- it's great fun! (I wrote it because I wanted to try writing
recursive functions with the Y combinator (hint!). Pretty pointless
honestly, but very enjoyable.)


I also got a lot of inspiration from this video:
https://www.youtube.com/watch?v=xvFZjo5PgG0
